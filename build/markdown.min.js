!function webpackUniversalModuleDefinition(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("markdown",[],n):"object"==typeof exports?exports.markdown=n():e.markdown=n()}("undefined"!=typeof self?self:this,function(){return function(e){function webpackJsonpCallback(n){for(var a,o,i=n[0],c=n[1],l=n[2],p=0,u=[];p<i.length;p++)o=i[p],t[o]&&u.push(t[o][0]),t[o]=0;for(a in c)Object.prototype.hasOwnProperty.call(c,a)&&(e[a]=c[a]);for(s&&s(n);u.length;)u.shift()();return r.push.apply(r,l||[]),checkDeferredModules()}function checkDeferredModules(){for(var e,n=0;n<r.length;n++){for(var a=r[n],o=!0,i=1;i<a.length;i++){var s=a[i];0!==t[s]&&(o=!1)}o&&(r.splice(n--,1),e=__webpack_require__(__webpack_require__.s=a[0]))}return e}var n={},t={3:0},r=[];function __webpack_require__(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}__webpack_require__.m=e,__webpack_require__.c=n,__webpack_require__.d=function(e,n,t){__webpack_require__.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.t=function(e,n){if(1&n&&(e=__webpack_require__(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(__webpack_require__.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)__webpack_require__.d(t,r,function(n){return e[n]}.bind(null,r));return t},__webpack_require__.n=function(e){var n=e&&e.__esModule?function getDefault(){return e.default}:function getModuleExports(){return e};return __webpack_require__.d(n,"a",n),n},__webpack_require__.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},__webpack_require__.p="";var a=("undefined"!=typeof self?self:this).webpackJsonp_name_=("undefined"!=typeof self?self:this).webpackJsonp_name_||[],o=a.push.bind(a);a.push=webpackJsonpCallback,a=a.slice();for(var i=0;i<a.length;i++)webpackJsonpCallback(a[i]);var s=o;return r.push([152,0,1]),checkDeferredModules()}({152:function(e,n,t){"use strict";t.r(n);t(23),t(36),t(18),t(53),t(24),t(22),t(56);var r={install:'<i class="fas fa-clipboard-check"></i>',object:'<i class="fas fa-bullseye"></i>',string:'<i class="fas fa-grip-lines-vertical"></i>',method:'<i class="fas fa-atom"></i>',promise:'<i class="fas fa-spinner"></i>'},a=["api-methods"],o=function addNavItem(e,n){var t=document.createElement("li"),o=document.createElement("a"),i=n.innerText.toLowerCase().replace(/ /g,"-");-1===a.indexOf(i)&&(n.id="tipdig-nav-".concat(i),o.setAttribute("href","#".concat(n.id)),o.innerHTML="".concat(r[i]||"","\n").concat(n.innerText),o.className="tipdig-link",t.appendChild(o),t.className="tipdig-link-wrapper",e.appendChild(t))};document.addEventListener("DOMContentLoaded",function(){var e=document.getElementById("markdown-content");if(e&&window.markdownit){var n=window.markdownit({html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:function highlight(){return""}});e.innerHTML=n.render("# jsUtils\n\nA small (60.8 KiB) utility library for commonly used helper methods.\n\n## Install\n\n  * Download the repo\n    ```js\n      // Clone repo\n      git clone https://github.com/lancetipton/jsUtils.git\n      // Or Add to package.json\n      \"dependencies\": {\n        \"jsUtils\": \"git+https://github.com/lancetipton/jsUtils.git\"\n        ...\n      },\n    ```\n  * Add to your code\n    ```js\n      // * Import into code\n        import jsUtils from 'jsUtils'\n        // Or only the methods you need\n        import { capitalize } from 'jsUtils/string'\n        import { reduceObj, mapObj } from 'jsUtils/object'\n\n      // * Or require code\n        const jsUtils = require('jsUtils')\n      \n      // * Add as html script\n        <script src='/path/to/jsUtils/build/jsUtils.min.js'><\/script>\n        // jsUtils will be available on the window \n        <script>\n          const jsUtils = window.jsUtils\n          \n        <\/script>\n    ```\n\n## API Methods\n\n### Object\n\n  * **Obj.clearObj**\n    * Removes all properties from an object\n    * @param { object } obj - object to remove properties from\n    * @param { array } filter - list of keys to not remove\n    * @returns { null }\n    \n  * **Obj.cloneJson**\n    * Clones an object by converting to JSON string and back\n    * @param { object } obj - object to clone\n    * @returns { object } copy of original object\n\n  * **Obj.deepFreeze**\n    * Recursively freezes and object\n    * @param  { object } obj\n    * @return { object } - frozen Object\n\n  * **Obj.deepMerge**\n    * Deep merges an array of objects together\n    * @param { array } sources - array of objects to join\n    * @returns { object | array } - merged object or array\n\n  * **Obj.get**\n    * Searches an object based on the path param\n    * i.e. path = 'data.foo.bar' => will return obj.data.foo.bar\n    * If bar does not exist, then will return obj.data.foo\n    * @param  { object } obj - will search the object based on the path\n    * @param  { string || array } path - . separated string to search the object\n    * @return the final value found from the path\n\n  * **Obj.isObj**\n    * Checks is data is an object and not an array\n    * @param { object } obj - data to check\n    * @returns { boolean }\n\n  * **Obj.jsonEqual**\n    * Compares two objects by converting to JSON, and checking string equality\n    * @param  { object || array } one - object to compare with param two\n    * @param  { object || array } two - object to compare with param one\n    * @return { boolean } status of equality\n\n  * **Obj.mapObj**\n    * Map over and objects props and values\n    * @param  { object } obj\n    * @return { array } -  returned values from callback\n\n  * **Obj.pickKeys**\n    * Creates a new object from passed in object with keys defined from array\n    * @param  { object } target - object to pull keys from\n    * @param  { array } keys - keys to add to new object\n    * @return { object } new object with only keys from passed in keys array\n\n  * **Obj.omitKeys**\n    * Creates a new object from passed in object with keys not defined from array\n    * @param  { object } target - object to pull keys from\n    * @param  { array } keys - keys to not add to new object\n    * @return { object } new object with only keys not in array\n\n  * **Obj.reduceObj**\n    * Loop over and objects props and values and reduce to new object\n    * @param  { object } obj\n    * @return { object } - updated object\n\n  * **Obj.sanitizeCopy**\n    * Copies object and sanitizes all html strings in an object's properties\n    * @param  { object } obj to be sanitize\n    * @return { object } - obj with strings sanitized\n\n  * **Obj.set**\n    * Adds a path to an object.\n    * If the path already exists, but not in the correct format it will be replaced\n    * path is built from a . separated string\n    * i.e. path = 'data.foo.bar' => obj.data.foo.bar will be created on the object\n    * @param  { object } obj - object to have the path added to it\n    * @param  { string || array } path - path that should be created on the object, separated by .\n    * @param  { any } finalValue - when ever the final value of the path should be\n    * @return the obj param\n\n  * **Obj.trimStringFields**\n    * Trims objects string fields\n    * @param  { object } object\n    * @return { object } - object with string fields trimmed\n\n  * **Obj.unset**\n    * Removes a path from an object ( opposite of set )\n    * @param  { object } obj - parent object containg attr to remove\n    * @param  { string || array } path - path of attr to remove, separated by string\n    * @return the passed in object, with the attribute found at the path removed\n \n### String\n\n  * **Str.camelCase**\n    * Converts a string to camel case\n    * @param  { string } string to be converted\n    * @return { string } - string in camel case format\n\n  * **Str.clean**\n    * Converts `-` and `_` to white space and removes `.`\n    * @param  { string } string to be converted\n    * @return { string } - cleaned string\n\n  * **Str.capitalize**\n    * Converts first letter of a string to be capitalized\n    * @param  { string } string\n    * @return { string } - Passed in string, but capitalized\n\n  * **Str.isEmail**\n    * Check if string is a email\n    * @param  { string } string to check\n    * @return { boolean } - if it's a email\n\n  * **Str.isPhone**\n    * Check if string is a phone number\n    * @param  { string } string to check\n    * @return { boolean } - if it's a phone number\n\n  * **Str.isStr**\n    * Check if data is a string\n    * @param  { string } string\n    * @return { boolean } - if it's a string\n\n  * **Str.isUrl**\n    * Check if string is a url\n    * @param  { string } string to check\n    * @return { boolean } - if it's a url\n \n  * **Str.isUuid**\n    * Check if string is a uuid\n    * @param  { string } string to check\n    * @return { boolean } - if it's a uuid\n \n  * **Str.parseJSON**\n    * Convert JSON string into object, wrapped in a try / catch\n    * @param  { string } string\n    * @return { object } - JSON object\n\n  * **Str.plural**\n    * Adds an `s` to the end of a string, if one does not exist\n    * @param  { string } str - string to convert\n    * @return { string } string as a plural\n\n  * **Str.removeDot**\n    * Removes a `.` in a string\n    * @param  { string } str - string to convert\n    * @return { string } - string without the `.`\n\n  * **Str.sanitize**\n    * Sanitize a string of HTML content\n    * @param  { string } string\n    * @return { string } - cleaned string\n\n  * **Str.singular**\n    * Remove an `s` at the end of a string, if the last char is an `s`\n    * @param  { string } str - string to convert\n    * @return { string } string as singular\n\n  * **Str.styleCase**\n    * Converts a string to css in js format\n    * Useful for converting css rules into js format, I.E. margin-top => marginTop\n    * @param  { string } str - string to be converted\n    * @return { string } - string in style case format\n\n  * **Str.trainCase**\n    * Converts a string to train case\n    * @param  { string } string to be converted\n    * @return { string } - string wit spaces converted to lodash and all lowercase\n\n  * **Str.wordCaps**\n    * Converts all words in a string to be capitalized\n    * @param  { string } string to be converted\n    * @return { string } - string with all words capitalized\n\n### Method\n\n  * **Method.checkCall**\n    * Check if the passed in method is a function, and calls it\n    * @param  { function } method - function to call\n    * @param  { object } params - params to pass to the method on call\n    * @return { any } - whatever the passed in method returns\n\n  * **Method.debounce**\n    * Ensures a function is not called to many times\n    * @param  { function } func - function to call\n    * @param  { number } wait - how long to wait between function calls\n    * @param  { boolean } immediate - should call immediately\n    * @return { void }\n  \n  * **Method.isFunc**\n    * Check if the passed in item is a function\n    * @param  { any } test \n    * @return { boolean } is a function\n  \n  * **Method.uuid**\n    * Creates a uuid, unique up to around 20 million iterations. good enough for us\n    * @param  { number } start of the uuid\n    * @return { string } - build uuid\n\n### Promise\n\n  * **Promise.promisifyAll**\n    * Converts Objects method properties into promiseAsync\n    * allow using promisifyAll\n    * @param  { object } object\n    * @return { object } - promisified object\n\n  * **Promise.promisify**\n    * Polyfill to promisify a method that uses the standard node.js callback structure\n    * @param  { function } method - method to turn into a promise\n    * @return method as a promise"),Array.from(document.getElementsByTagName("a")).map(function(e){e.setAttribute("target","_blank")});var t=document.getElementById("nav-list");t&&Array.from(e.getElementsByTagName("h2")).map(function(e){e.id||o(t,e)}),t&&Array.from(e.getElementsByTagName("h3")).map(function(e){e.id||o(t,e)})}})}})});